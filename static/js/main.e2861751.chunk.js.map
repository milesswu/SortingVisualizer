{"version":3,"sources":["app/option-bar/OptionBar.jsx","app/reducers/array/actions.js","app/reducers/element-types/actions.js","app/reducers/run-status/actions.js","app/algorithms/common.js","app/algorithms/selectionSort.js","app/algorithms/insertionSort.js","app/algorithms/bubbleSort.js","app/algorithms/hSort.js","app/algorithms/shellSort.js","app/algorithms/quickSort.js","app/algorithms/mergeSort.js","app/algorithms/heapSort.js","app/option-bar/OptionBarContainer.js","app/reducers/algorithm/actions.js","app/reducers/speed/actions.js","app/body/Body.jsx","app/body/BodyContainer.js","app/App.js","serviceWorker.js","app/reducers/array/index.js","app/reducers/algorithm/index.js","app/reducers/element-types/index.js","app/reducers/run-status/index.js","app/reducers/speed/index.js","reducers.js","store.js","index.js"],"names":["OptionBar","props","algorithm","array","runStatus","speed","generateArray","setAlgorithm","setSpeed","sort","useEffect","id","className","onClick","length","disabled","htmlFor","type","name","min","max","onChange","event","parseInt","target","value","console","log","setArray","newArray","payload","setSorted","elements","addSorted","element","setComparing","setSwapping","setSignificant","setRunStatus","status","swap","arr","index1","index2","temp","handleDispatch","dispatchStack","dispatch","shift","action","i","setTimeout","map","index","selectionSort","curMin","curMinIndex","push","j","insertionSort","curElement","curElementIndex","finalAction","bubbleSort","swapMade","numSorted","hSort","h","Math","floor","random","shellSort","quickSort","quickSortHelper","start","end","low","high","pivot","pivotIndex","partition","mergeSort","mergeSortHelper","mid","left","slice","curIndex","stateArrayIndex","right","combined","lowerSide","merge","heapSort","connect","state","selectedAlgorithm","Body","sorted","comparing","swapping","significant","numWidth","width","document","innerWidth","clientWidth","body","numMargin","margin","color","backgroundColor","includes","key","style","height","marginLeft","marginRight","App","Boolean","window","location","hostname","match","initialState","initialSorted","initialComparing","intialSwapping","combineReducers","rootReducer","store","createStore","getState","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2861751.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./OptionBar.css\";\r\nfunction OptionBar(props) {\r\n\t// Get State Data\r\n\tconst { algorithm, array, runStatus, speed } = props;\r\n\r\n\t// Get Dispatch Methods\r\n\tconst { generateArray, setAlgorithm, setSpeed, sort } = props;\r\n\r\n\t//Initialize array\r\n\tconst defaultArraySize = 50;\r\n\tuseEffect(() => {\r\n\t\tgenerateArray(defaultArraySize);\r\n\t}, [generateArray]);\r\n\r\n\tconst changeSize = (event) => {\r\n\t\tgenerateArray(parseInt(event.target.value) + 3);\r\n\t};\r\n\r\n\tconst selectAlgorithm = (event) => {\r\n\t\tconsole.log(event.target.value);\r\n\t\tsetAlgorithm(event.target.value);\r\n\t};\r\n\r\n\t// Handle Algorithm Speed\r\n\tconst defaultSpeed = 500;\r\n\tuseEffect(() => {\r\n\t\tsetSpeed(defaultSpeed);\r\n\t}, [setSpeed]);\r\n\tconst minSpeed = 1000;\r\n\tconst changeSpeed = (event) => {\r\n\t\tsetSpeed(minSpeed - parseInt(event.target.value));\r\n\t};\r\n\r\n\t//Render logic\r\n\treturn (\r\n\t\t<div id=\"option-bar\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{/* generate new array */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid=\"generateArray\"\r\n\t\t\t\t\t\tonClick={() => generateArray(array.length)}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tGenerate New Array\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* change array size and speed of visualizer */}\r\n\t\t\t\t<div className=\"col\" id=\"sliders\">\r\n\t\t\t\t\t<label htmlFor=\"changeSize\">change array size:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\tname=\"\"\r\n\t\t\t\t\t\tid=\"changeSize\"\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\tonChange={changeSize}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"changeSpeed\">change algorithm speed:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\tname=\"\"\r\n\t\t\t\t\t\tid=\"changeSpeed\"\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax={minSpeed}\r\n\t\t\t\t\t\tvalue={minSpeed - speed}\r\n\t\t\t\t\t\tonChange={changeSpeed}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* choose sorting algorithm */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<label htmlFor=\"algorithm\">select sorting algorithm:</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tname=\"algorithm\"\r\n\t\t\t\t\t\tid=\"algorithm\"\r\n\t\t\t\t\t\tvalue={algorithm}\r\n\t\t\t\t\t\tonChange={selectAlgorithm}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=\"\">--</option>\r\n\t\t\t\t\t\t<option value=\"selectionSort\">Selection Sort</option>\r\n\t\t\t\t\t\t<option value=\"insertionSort\">Insertion Sort</option>\r\n\t\t\t\t\t\t<option value=\"bubbleSort\">Bubble Sort</option>\r\n\t\t\t\t\t\t<option value=\"hSort\">H Sort</option>\r\n\t\t\t\t\t\t<option value=\"shellSort\">Shell Sort</option>\r\n\t\t\t\t\t\t<option value=\"quickSort\">QuickSort</option>\r\n\t\t\t\t\t\t<option value=\"mergeSort\">Merge Sort</option>\r\n\t\t\t\t\t\t{/* <option value=\"heapSort\">Heap Sort</option> */}\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* start sorting */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => sort(array, algorithm, speed)}\r\n\t\t\t\t\t\tdisabled={runStatus || algorithm === \"\"}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default OptionBar;\r\n","//Action Types\r\nexport const SET_ARRAY = \"SET_ARRAY\";\r\n\r\n//Action Creators\r\nexport const setArray = (newArray) => {\r\n\treturn {\r\n\t\ttype: SET_ARRAY,\r\n\t\tpayload: {\r\n\t\t\tnewArray,\r\n\t\t},\r\n\t};\r\n};\r\n","// Action Types\r\nexport const SET_SORTED = \"SET_SORTED\";\r\nexport const ADD_SORTED = \"ADD_SORTED\";\r\nexport const SET_COMPARING = \"SET_COMPARING\";\r\nexport const SET_SWAPPING = \"SET_SWAPPING\";\r\nexport const SET_SIGNIFICANT = \"SET_SIGNIFICANT\";\r\n\r\n// Action Creators\r\nexport const setSorted = (elements) => {\r\n\treturn {\r\n\t\ttype: SET_SORTED,\r\n\t\tpayload: {\r\n\t\t\telements,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const addSorted = (element) => {\r\n\treturn {\r\n\t\ttype: ADD_SORTED,\r\n\t\tpayload: {\r\n\t\t\telement,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const setComparing = (elements) => {\r\n\treturn {\r\n\t\ttype: SET_COMPARING,\r\n\t\tpayload: {\r\n\t\t\telements,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const setSwapping = (elements) => {\r\n\treturn {\r\n\t\ttype: SET_SWAPPING,\r\n\t\tpayload: {\r\n\t\t\telements,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const setSignificant = (element) => {\r\n\treturn {\r\n\t\ttype: SET_SIGNIFICANT,\r\n\t\tpayload: {\r\n\t\t\telement,\r\n\t\t},\r\n\t};\r\n};\r\n","// Action Types\r\nexport const SET_RUN_STATUS = \"SET_RUN_STATUS\";\r\n\r\n// Action Creators\r\nexport const setRunStatus = (status) => {\r\n\treturn {\r\n\t\ttype: SET_RUN_STATUS,\r\n\t\tpayload: {\r\n\t\t\tstatus,\r\n\t\t},\r\n\t};\r\n};\r\n","import {\r\n\tsetSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { setRunStatus } from \"../reducers/run-status/actions\";\r\n\r\nexport const swap = (arr, index1, index2) => {\r\n\tlet temp = arr[index1];\r\n\tarr[index1] = arr[index2];\r\n\tarr[index2] = temp;\r\n};\r\n\r\nexport function handleDispatch(dispatchStack, dispatch, array, speed) {\r\n\tif (!dispatchStack.length) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconsole.log(\"done\");\r\n\t\t\tdispatch(setComparing([]));\r\n\t\t\tdispatch(setSwapping([]));\r\n\t\t\tdispatch(setSignificant(null));\r\n\t\t\tconsole.log(array);\r\n\t\t\tdispatch(setSorted(array.map((element, index) => index)));\r\n\t\t\tdispatch(setRunStatus(false));\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tlet { action, payload } = dispatchStack.shift();\r\n\t// TODO: Refactor all dispatchStack code so that this conditional is not necessary\r\n\t// console.log(typeof action, action);\r\n\tif (typeof action == \"object\") {\r\n\t\tfor (let i = 0; i < action.length; i++) {\r\n\t\t\tdispatch(action[i](payload[i]));\r\n\t\t}\r\n\t} else {\r\n\t\tdispatch(action(payload));\r\n\t}\r\n\r\n\tsetTimeout(() => {\r\n\t\thandleDispatch(dispatchStack, dispatch, array, speed);\r\n\t}, speed);\r\n}\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\taddSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction selectionSort(array, dispatch, speed) {\r\n\tconsole.log(\"selection\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tlet curMin = arr[i];\r\n\t\tlet curMinIndex = i;\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setSignificant,\r\n\t\t\tpayload: curMinIndex,\r\n\t\t});\r\n\r\n\t\tfor (let j = i + 1; j < arr.length; j++) {\r\n\t\t\t// comparing jth element to current minimum\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setComparing,\r\n\t\t\t\tpayload: [curMinIndex, j],\r\n\t\t\t});\r\n\r\n\t\t\t/*console.log(\r\n\t\t\t\t`comparing: ${arr[j]} to ${curMin} on the ${j}th iteration`\r\n\t\t\t); */\r\n\t\t\tif (arr[j] < curMin) {\r\n\t\t\t\t// update minimum value\r\n\t\t\t\t// stop visual comparison\r\n\t\t\t\tcurMin = arr[j];\r\n\t\t\t\tcurMinIndex = j;\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: [setSignificant, setComparing],\r\n\t\t\t\t\tpayload: [curMinIndex, []],\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// stop visual comparison\r\n\t\t\t\t// dispatchStack.push({\r\n\t\t\t\t// \taction: setComparing,\r\n\t\t\t\t// \tpayload: [],\r\n\t\t\t\t// });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// remove comparison\r\n\t\t// swapping minimum with first unsorted element in array\r\n\t\tif (curMinIndex != i) {\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setSwapping, setComparing],\r\n\t\t\t\tpayload: [[curMinIndex, i], []],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tswap(arr, curMinIndex, i);\r\n\r\n\t\t//update to post-swap array\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setArray,\r\n\t\t\tpayload: [...arr],\r\n\t\t});\r\n\r\n\t\t// unmark significant\r\n\t\t// unmark swapped elements\r\n\t\t// mark ith element as sorted\r\n\t\tdispatchStack.push({\r\n\t\t\taction: [setSignificant, setSwapping, addSorted],\r\n\t\t\tpayload: [[], [], i],\r\n\t\t});\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default selectionSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction insertionSort(array, dispatch, speed) {\r\n\tconsole.log(\"insertion\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\r\n\tfor (let i = 1; i < arr.length; i++) {\r\n\t\tlet curElement = arr[i];\r\n\t\tlet curElementIndex = i;\r\n\r\n\t\t// set last element in subarray as significant\r\n\t\tdispatchStack.push({\r\n\t\t\taction: [setSignificant, setComparing, setSwapping],\r\n\t\t\tpayload: [i, [], []],\r\n\t\t});\r\n\r\n\t\t// compare all previous elements to find correct placement\r\n\t\tlet j = i - 1;\r\n\t\twhile (arr[j] > curElement && j >= 0) {\r\n\t\t\t// indicate current comparison pair\r\n\t\t\t// remove visual swapping\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setComparing, setSwapping],\r\n\t\t\t\tpayload: [[curElementIndex, j], []],\r\n\t\t\t});\r\n\r\n\t\t\t// swapping jth element with element of interest\r\n\t\t\t// remove visual comparison\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setSwapping, setComparing],\r\n\t\t\t\tpayload: [[curElementIndex, j], []],\r\n\t\t\t});\r\n\t\t\tswap(arr, curElementIndex, j);\r\n\t\t\tcurElementIndex = j;\r\n\r\n\t\t\t// update state array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setArray,\r\n\t\t\t\tpayload: [...arr],\r\n\t\t\t});\r\n\r\n\t\t\tj--;\r\n\t\t}\r\n\t\t// indicate final comparison (no swap after this)\r\n\t\tconsole.log(curElementIndex, j);\r\n\t\tlet finalAction = {\r\n\t\t\taction: [setSwapping],\r\n\t\t\tpayload: [[]],\r\n\t\t};\r\n\t\tif (curElementIndex != j && j >= 0) {\r\n\t\t\tfinalAction = {\r\n\t\t\t\taction: [setComparing, setSwapping],\r\n\t\t\t\tpayload: [[curElementIndex, j], []],\r\n\t\t\t};\r\n\t\t}\r\n\t\tdispatchStack.push(finalAction);\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default insertionSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\taddSorted,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction bubbleSort(array, dispatch, speed) {\r\n\tconsole.log(\"bubble\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tlet swapMade = true;\r\n\tlet numSorted = 0;\r\n\r\n\twhile (swapMade) {\r\n\t\tswapMade = false;\r\n\t\tfor (let i = 0; i < arr.length - 1 - numSorted; i++) {\r\n\t\t\t// compare procedurally along the array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setComparing, setSwapping],\r\n\t\t\t\tpayload: [[i, i + 1], []],\r\n\t\t\t});\r\n\r\n\t\t\tif (arr[i] > arr[i + 1]) {\r\n\t\t\t\t// swap adjacent elements\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: [setSwapping, setComparing],\r\n\t\t\t\t\tpayload: [[i, i + 1], []],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tswap(arr, i, i + 1);\r\n\r\n\t\t\t\t// update state array\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: setArray,\r\n\t\t\t\t\tpayload: [...arr],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tswapMade = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// indicate last element is now sorted (maximum in subarray)\r\n\t\tdispatchStack.push({\r\n\t\t\taction: [addSorted, setSwapping],\r\n\t\t\tpayload: [arr.length - 1 - numSorted, []],\r\n\t\t});\r\n\t\tnumSorted++;\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n}\r\n\r\nexport default bubbleSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\taddSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction hSort(array, dispatch, speed) {\r\n\tconsole.log(\"h\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tconst h = Math.floor(Math.random() * (arr.length / 3)) + 2;\r\n\tconsole.log(h);\r\n\r\n\tfor (let i = 0; i < h; i++) {\r\n\t\tlet swapMade = true;\r\n\r\n\t\twhile (swapMade) {\r\n\t\t\tswapMade = false;\r\n\t\t\tfor (let j = i; j < arr.length - h; j += h) {\r\n\t\t\t\t// compare procedurally along the array\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: [setComparing, setSwapping],\r\n\t\t\t\t\tpayload: [[j, j + h], []],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (arr[j] > arr[j + h]) {\r\n\t\t\t\t\t// swap adjacent elements\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: [setSwapping, setComparing],\r\n\t\t\t\t\t\tpayload: [[j, j + h], []],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswap(arr, j, j + h);\r\n\r\n\t\t\t\t\t// update state array\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: setArray,\r\n\t\t\t\t\t\tpayload: [...arr],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswapMade = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default hSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\taddSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction shellSort(array, dispatch, speed) {\r\n\tconsole.log(\"shell\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tlet h = Math.floor(arr.length / 2);\r\n\t// console.log(\"init array: \", array);\r\n\r\n\twhile (h > 0) {\r\n\t\tconsole.log(\"current h: \", h);\r\n\t\t//hsort\r\n\t\tfor (let i = 0; i < h; i++) {\r\n\t\t\tlet swapMade = true;\r\n\t\t\tlet numSorted = 0;\r\n\r\n\t\t\twhile (swapMade) {\r\n\t\t\t\tswapMade = false;\r\n\t\t\t\tfor (let j = i; j < arr.length - h - numSorted; j += h) {\r\n\t\t\t\t\t// compare procedurally along the array\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: [setComparing, setSwapping],\r\n\t\t\t\t\t\tpayload: [[j, j + h], []],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (arr[j] > arr[j + h]) {\r\n\t\t\t\t\t\t// swap adjacent elements\r\n\t\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\t\taction: [setSwapping, setComparing],\r\n\t\t\t\t\t\t\tpayload: [[j, j + h], []],\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tswap(arr, j, j + h);\r\n\r\n\t\t\t\t\t\t// update state array\r\n\t\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\t\taction: setArray,\r\n\t\t\t\t\t\t\tpayload: [...arr],\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tswapMade = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// indicate last element is now sorted (maximum in subarray)\r\n\t\t\t\tif (h == 1) {\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: [addSorted, setComparing, setSwapping],\r\n\t\t\t\t\t\tpayload: [arr.length - 1 - numSorted, [], []],\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tnumSorted++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\th = Math.floor(h / 2);\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default shellSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n\taddSorted,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction quickSort(array, dispatch, speed) {\r\n\tconsole.log(\"quick\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tlet start = 0;\r\n\tlet end = array.length - 1;\r\n\tquickSortHelper(arr, start, end, dispatchStack);\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nfunction quickSortHelper(array, start, end, dispatchStack) {\r\n\tif (start >= end) {\r\n\t\tdispatchStack.push({\r\n\t\t\taction: [addSorted],\r\n\t\t\tpayload: [start],\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet low = start;\r\n\tlet high = end;\r\n\thigh = partition(array, low, high, dispatchStack);\r\n\t// the pivot used in the partition is now sorted\r\n\tdispatchStack.push({\r\n\t\taction: [addSorted, setSwapping, setComparing],\r\n\t\tpayload: [high, [], []],\r\n\t});\r\n\t// console.log(\"after partition array: \", array.slice(start, end + 1));\r\n\r\n\t// sort the left side of the array\r\n\tquickSortHelper(array, start, high - 1, dispatchStack);\r\n\r\n\t// sort the right side of the array\r\n\tquickSortHelper(array, high + 1, end, dispatchStack);\r\n}\r\n\r\nfunction partition(array, low, high, dispatchStack) {\r\n\tlet pivot = array[low];\r\n\tlet pivotIndex = low;\r\n\r\n\t// console.log(\"current pivot: \", pivot);\r\n\t// indicate the pivot to be significant\r\n\tdispatchStack.push({\r\n\t\taction: setSignificant,\r\n\t\tpayload: pivotIndex,\r\n\t});\r\n\tlow++;\r\n\tdispatchStack.push({\r\n\t\taction: setComparing,\r\n\t\tpayload: [low, high],\r\n\t});\r\n\r\n\twhile (high >= low) {\r\n\t\tif (array[high] < pivot && array[low] > pivot) {\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setSwapping, setComparing],\r\n\t\t\t\tpayload: [[low, high], []],\r\n\t\t\t});\r\n\r\n\t\t\tswap(array, low, high);\r\n\r\n\t\t\t// update state array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setArray, setSwapping],\r\n\t\t\t\tpayload: [[...array], []],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (array[high] >= pivot) {\r\n\t\t\thigh--;\r\n\t\t}\r\n\t\tif (array[low] <= pivot) {\r\n\t\t\tlow++;\r\n\t\t}\r\n\t\tif (high >= low) {\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: [setComparing, setSwapping],\r\n\t\t\t\tpayload: [[low, high], []],\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// swap pivot with latest element that is <=\r\n\tdispatchStack.push({\r\n\t\taction: [setSwapping, setComparing],\r\n\t\tpayload: [[pivotIndex, high], []],\r\n\t});\r\n\tswap(array, pivotIndex, high);\r\n\r\n\t// update state array\r\n\tdispatchStack.push({\r\n\t\taction: setArray,\r\n\t\tpayload: [...array],\r\n\t});\r\n\r\n\tpivotIndex = high;\r\n\treturn pivotIndex;\r\n}\r\n\r\nexport default quickSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap } from \"./common\";\r\n\r\nfunction mergeSort(array, dispatch, speed) {\r\n\tconsole.log(\"merge\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\r\n\tmergeSortHelper(arr, 0, array.length - 1, dispatchStack);\r\n}\r\n\r\nfunction mergeSortHelper(array, start, end, dispatchStack) {\r\n\tif (start >= end) {\r\n\t\treturn;\r\n\t}\r\n\tlet mid = Math.floor((start + end) / 2);\r\n\t// set middle point to be significant\r\n\tdispatchStack.push({\r\n\t\taction: setSignificant,\r\n\t\tpayload: mid,\r\n\t});\r\n\r\n\t// sort left half of array\r\n\tmergeSortHelper(array, start, mid - 1, dispatchStack);\r\n\r\n\t// sort right half of array\r\n\tmergeSortHelper(array, mid, end, dispatchStack);\r\n\r\n\t// merge two halves in a sorted manner\r\n\tmerge(array, start, mid, end, dispatchStack);\r\n}\r\n\r\nfunction merge(array, start, mid, end, dispatchStack) {\r\n\t// make two subarrays, keep track of current position in each\r\n\tlet left = {\r\n\t\tarr: array.slice(start, mid),\r\n\t\tcurIndex: 0,\r\n\t\tstateArrayIndex: start,\r\n\t};\r\n\tconsole.log(\"left: \", left);\r\n\tlet right = {\r\n\t\tarr: array.slice(mid, end),\r\n\t\tcurIndex: 0,\r\n\t\tstateArrayIndex: mid,\r\n\t};\r\n\tconsole.log(\"right: \", right);\r\n\r\n\tlet combined = [];\r\n\r\n\twhile (\r\n\t\tleft.curIndex < left.arr.length &&\r\n\t\tright.curIndex < right.arr.length\r\n\t) {\r\n\t\tlet lowerSide = null;\r\n\r\n\t\t// indicate comparison between elements from left and right halves\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setComparing,\r\n\t\t\tpayload: [left.stateArrayIndex, right.stateArrayIndex],\r\n\t\t});\r\n\t\tif (left.arr[left.curIndex] <= right.arr[right.curIndex]) {\r\n\t\t\tlowerSide = left;\r\n\t\t} else {\r\n\t\t\tlowerSide = right;\r\n\t\t}\r\n\r\n\t\tcombined.push(lowerSide.arr[lowerSide.curIndex]);\r\n\t}\r\n}\r\n\r\nexport default mergeSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { setRunStatus } from \"../reducers/run-status/actions\";\r\n\r\nfunction heapSort(array, dispatch, speed) {\r\n\tconsole.log(\"heap\");\r\n}\r\n\r\nexport default heapSort;\r\n","import { connect } from \"react-redux\";\r\nimport OptionBar from \"./OptionBar\";\r\nimport { setArray } from \"../reducers/array/actions\";\r\nimport { setAlgorithm } from \"../reducers/algorithm/actions\";\r\nimport { setSorted } from \"../reducers/element-types/actions\";\r\nimport { setRunStatus } from \"../reducers/run-status/actions\";\r\nimport { setSpeed } from \"../reducers/speed/actions\";\r\nimport selectionSort from \"../algorithms/selectionSort\";\r\nimport insertionSort from \"../algorithms/insertionSort\";\r\nimport bubbleSort from \"../algorithms/bubbleSort\";\r\nimport hSort from \"../algorithms/hSort\";\r\nimport shellSort from \"../algorithms/shellSort\";\r\nimport quickSort from \"../algorithms/quickSort\";\r\nimport mergeSort from \"../algorithms/mergeSort\";\r\nimport heapSort from \"../algorithms/heapSort\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\talgorithm: state.algorithm,\r\n\tarray: state.array,\r\n\trunStatus: state.runStatus,\r\n\tspeed: state.speed,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tgenerateArray: (length) => {\r\n\t\tlet array = [];\r\n\t\twhile (array.length < length) {\r\n\t\t\tarray.push(Math.floor(Math.random() * 200) + 10);\r\n\t\t}\r\n\t\tdispatch(setSorted([]));\r\n\t\tdispatch(setArray(array));\r\n\t},\r\n\tsetAlgorithm: (algorithm) => {\r\n\t\tdispatch(setAlgorithm(algorithm));\r\n\t},\r\n\tsetSpeed: (speed) => {\r\n\t\tdispatch(setSpeed(speed));\r\n\t},\r\n\tsort: (array, algorithm, speed) => {\r\n\t\tlet selectedAlgorithm;\r\n\r\n\t\t// identify selected algorithm\r\n\t\tswitch (algorithm) {\r\n\t\t\tcase \"selectionSort\":\r\n\t\t\t\tselectedAlgorithm = selectionSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"insertionSort\":\r\n\t\t\t\tselectedAlgorithm = insertionSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bubbleSort\":\r\n\t\t\t\tselectedAlgorithm = bubbleSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"hSort\":\r\n\t\t\t\tselectedAlgorithm = hSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"shellSort\":\r\n\t\t\t\tselectedAlgorithm = shellSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"quickSort\":\r\n\t\t\t\tselectedAlgorithm = quickSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"mergeSort\":\r\n\t\t\t\tselectedAlgorithm = mergeSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"heapSort\":\r\n\t\t\t\tselectedAlgorithm = heapSort;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tselectedAlgorithm = null;\r\n\t\t}\r\n\r\n\t\t// setup start of algorithm\r\n\t\tdispatch(setSorted([]));\r\n\t\tdispatch(setRunStatus(true));\r\n\t\tselectedAlgorithm(array, dispatch, speed);\r\n\t},\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(OptionBar);\r\n","// Action Types\r\nexport const SET_ALGORITHM = \"SET_ALGORITHM\";\r\n\r\n// Action Creators\r\nexport const setAlgorithm = (algorithm) => {\r\n\treturn {\r\n\t\ttype: SET_ALGORITHM,\r\n\t\tpayload: {\r\n\t\t\talgorithm,\r\n\t\t},\r\n\t};\r\n};\r\n","// Action Types\r\nexport const SET_SPEED = \"SET_SPEED\";\r\n\r\n// Action Creators\r\nexport const setSpeed = (speed) => {\r\n\treturn {\r\n\t\ttype: SET_SPEED,\r\n\t\tpayload: {\r\n\t\t\tspeed,\r\n\t\t},\r\n\t};\r\n};\r\n","import React from \"react\";\r\nimport \"./Body.css\";\r\n\r\nfunction Body(props) {\r\n\tconst { array } = props;\r\n\tconst { sorted, comparing, swapping, significant } = props.elements;\r\n\r\n\tconst numWidth = Math.floor(100 / (array.length * 1.5));\r\n\tlet width = `${numWidth}vw`;\r\n\tif (numWidth < 1) {\r\n\t\twidth = `${Math.floor(\r\n\t\t\tdocument.innerWidth ||\r\n\t\t\t\tdocument.clientWidth ||\r\n\t\t\t\tdocument.body.clientWidth / (array.length * 2)\r\n\t\t)}px`;\r\n\t}\r\n\tconst numMargin =\r\n\t\tarray.length < 5\r\n\t\t\t? 10\r\n\t\t\t: array.length < 8\r\n\t\t\t? 8\r\n\t\t\t: array.length < 11\r\n\t\t\t? 6\r\n\t\t\t: array.length < 20\r\n\t\t\t? 4\r\n\t\t\t: array.length < 50\r\n\t\t\t? 3.5\r\n\t\t\t: array.length < 100\r\n\t\t\t? 3\r\n\t\t\t: array.length < 130\r\n\t\t\t? 2.5\r\n\t\t\t: 2;\r\n\tconst margin = `${numMargin}px`;\r\n\tconst color = numWidth > 1 ? \"white\" : \"transparent\";\r\n\treturn (\r\n\t\t<div className=\"bodyContainer\">\r\n\t\t\t{array.length\r\n\t\t\t\t? array.map((value, index) => {\r\n\t\t\t\t\t\tconst backgroundColor = swapping.includes(index)\r\n\t\t\t\t\t\t\t? \"red\"\r\n\t\t\t\t\t\t\t: comparing.includes(index)\r\n\t\t\t\t\t\t\t? \"yellow\"\r\n\t\t\t\t\t\t\t: significant === index\r\n\t\t\t\t\t\t\t? \"magenta\"\r\n\t\t\t\t\t\t\t: sorted.includes(index)\r\n\t\t\t\t\t\t\t? \"green\"\r\n\t\t\t\t\t\t\t: \"blue\";\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName=\"arrayElement\"\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\theight: `${value * 3}px`,\r\n\t\t\t\t\t\t\t\t\twidth: width,\r\n\t\t\t\t\t\t\t\t\tmarginLeft: margin,\r\n\t\t\t\t\t\t\t\t\tmarginRight: margin,\r\n\t\t\t\t\t\t\t\t\tbackgroundColor: backgroundColor,\r\n\t\t\t\t\t\t\t\t\tcolor: color,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{value}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t  })\r\n\t\t\t\t: null}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Body;\r\n","import { connect } from \"react-redux\";\r\nimport Body from \"./Body\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tarray: state.array,\r\n\telements: state.elements,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Body);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport OptionBar from \"./option-bar/OptionBarContainer\";\r\nimport Body from \"./body/BodyContainer\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<OptionBar />\r\n\t\t\t<Body />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_ARRAY } from \"./actions\";\r\nconst initialState = [];\r\n\r\n//Reducers\r\nconst array = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ARRAY:\r\n\t\t\treturn action.payload.newArray;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default array;\r\n","import { SET_ALGORITHM } from \"./actions\";\r\nconst initialState = \"\";\r\n\r\nconst algorithm = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ALGORITHM:\r\n\t\t\treturn action.payload.algorithm;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default algorithm;\r\n","import {\r\n\tSET_SORTED,\r\n\tSET_COMPARING,\r\n\tSET_SWAPPING,\r\n\tSET_SIGNIFICANT,\r\n\tADD_SORTED,\r\n} from \"./actions\";\r\nimport { combineReducers } from \"redux\";\r\nconst initialSorted = [];\r\nconst initialComparing = [];\r\nconst intialSwapping = [];\r\nconst initialSignificant = null;\r\n\r\n// Reducers for each element type\r\n\r\n//Green\r\nconst sorted = (state = initialSorted, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SORTED:\r\n\t\t\treturn action.payload.elements;\r\n\t\tcase ADD_SORTED:\r\n\t\t\treturn [...state, action.payload.element];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//Yellow\r\nconst comparing = (state = initialComparing, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_COMPARING:\r\n\t\t\treturn action.payload.elements;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//Red\r\nconst swapping = (state = intialSwapping, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SWAPPING:\r\n\t\t\treturn action.payload.elements;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//Magenta\r\nconst significant = (state = initialSignificant, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SIGNIFICANT:\r\n\t\t\treturn action.payload.element;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst elements = combineReducers({\r\n\tsorted,\r\n\tcomparing,\r\n\tswapping,\r\n\tsignificant,\r\n});\r\n\r\nexport default elements;\r\n","import { SET_RUN_STATUS } from \"./actions\";\r\nconst initialState = false;\r\n\r\n// Reducers\r\nconst runStatus = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_RUN_STATUS:\r\n\t\t\treturn action.payload.status;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default runStatus;\r\n","import { SET_SPEED } from \"./actions\";\r\nconst initialState = 0;\r\n\r\nconst speed = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SPEED:\r\n\t\t\treturn action.payload.speed;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default speed;\r\n","import { combineReducers } from \"redux\";\r\nimport array from \"./app/reducers/array\";\r\nimport algorithm from \"./app/reducers/algorithm\";\r\nimport elements from \"./app/reducers/element-types\";\r\nimport runStatus from \"./app/reducers/run-status\";\r\nimport speed from \"./app/reducers/speed\";\r\n\r\nconst rootReducer = combineReducers({\r\n\talgorithm,\r\n\tarray,\r\n\telements,\r\n\trunStatus,\r\n\tspeed,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\nconsole.log(store.getState());\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//Redux integration\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}