{"version":3,"sources":["app/option-bar/OptionBar.jsx","app/reducers/array/actions.js","app/reducers/element-types/actions.js","app/reducers/run-status/actions.js","app/algorithms/common.js","app/algorithms/selectionSort.js","app/algorithms/insertionSort.js","app/algorithms/bubbleSort.js","app/algorithms/hSort.js","app/algorithms/shellSort.js","app/algorithms/quickSort.js","app/algorithms/mergeSort.js","app/algorithms/heapSort.js","app/option-bar/OptionBarContainer.js","app/reducers/algorithm/actions.js","app/body/Body.jsx","app/body/BodyContainer.js","app/App.js","serviceWorker.js","app/reducers/array/index.js","app/reducers/algorithm/index.js","app/reducers/element-types/index.js","app/reducers/run-status/index.js","reducers.js","store.js","index.js"],"names":["OptionBar","props","algorithm","array","runStatus","generateArray","setAlgorithm","sort","useEffect","id","className","onClick","length","disabled","htmlFor","type","name","min","max","onChange","event","parseInt","target","value","defaultArraySize","console","log","setArray","newArray","payload","setSorted","elements","addSorted","element","setComparing","setSwapping","setSignificant","setRunStatus","status","swap","arr","index1","index2","temp","handleDispatch","dispatchStack","dispatch","speed","shift","action","setTimeout","map","index","selectionSort","i","curMin","curMinIndex","push","j","insertionSort","curElement","curElementIndex","bubbleSort","swapMade","numSorted","hSort","h","Math","floor","random","shellSort","quickSort","quickSortHelper","start","end","low","high","pivot","pivotIndex","partition","mergeSort","mergeSortHelper","mid","left","cur","right","insertionIndex","swapIndex","merge","heapSort","connect","state","selectedAlgorithm","Body","el","App","Boolean","window","location","hostname","match","initialState","tempArr","initialSorted","initialComparing","intialSwapping","combineReducers","sorted","comparing","swapping","significant","rootReducer","store","createStore","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c178ba0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./OptionBar.css\";\r\nfunction OptionBar(props) {\r\n\t// Get State Data\r\n\tconst { algorithm, array, runStatus } = props;\r\n\r\n\t// Get Dispatch Methods\r\n\tconst { generateArray, setAlgorithm, sort } = props;\r\n\r\n\t//Initialize array\r\n\tconst defaultArraySize = 50;\r\n\tuseEffect(() => {\r\n\t\tgenerateArray(defaultArraySize);\r\n\t}, [generateArray]);\r\n\r\n\tconst changeSize = (event) => {\r\n\t\tgenerateArray(parseInt(event.target.value) + 3);\r\n\t};\r\n\r\n\tconst selectAlgorithm = (event) => {\r\n\t\tconsole.log(event.target.value);\r\n\t\tsetAlgorithm(event.target.value);\r\n\t};\r\n\r\n\t//Render logic\r\n\treturn (\r\n\t\t<div id=\"option-bar\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{/* generate new array */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid=\"generateArray\"\r\n\t\t\t\t\t\tonClick={() => generateArray(array.length)}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tGenerate New Array\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* change array size and speed of visualizer */}\r\n\t\t\t\t<div className=\"col\" id=\"sliders\">\r\n\t\t\t\t\t<label htmlFor=\"changeSize\">change array size:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\tname=\"\"\r\n\t\t\t\t\t\tid=\"changeSize\"\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\tonChange={changeSize}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"changeSpeed\">change algorithm speed:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\tname=\"\"\r\n\t\t\t\t\t\tid=\"changeSpeed\"\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax={defaultArraySize * 2}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* choose sorting algorithm */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<label htmlFor=\"algorithm\">select sorting algorithm:</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tname=\"algorithm\"\r\n\t\t\t\t\t\tid=\"algorithm\"\r\n\t\t\t\t\t\tvalue={algorithm}\r\n\t\t\t\t\t\tonChange={selectAlgorithm}\r\n\t\t\t\t\t\tdisabled={runStatus}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=\"\">--</option>\r\n\t\t\t\t\t\t<option value=\"selectionSort\">Selection Sort</option>\r\n\t\t\t\t\t\t<option value=\"insertionSort\">Insertion Sort</option>\r\n\t\t\t\t\t\t<option value=\"bubbleSort\">Bubble Sort</option>\r\n\t\t\t\t\t\t<option value=\"hSort\">H Sort</option>\r\n\t\t\t\t\t\t<option value=\"shellSort\">Shell Sort</option>\r\n\t\t\t\t\t\t<option value=\"quickSort\">QuickSort</option>\r\n\t\t\t\t\t\t<option value=\"mergeSort\">Merge Sort</option>\r\n\t\t\t\t\t\t<option value=\"heapSort\">Heap Sort</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* start sorting */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => sort(array, algorithm, 10)}\r\n\t\t\t\t\t\tdisabled={runStatus || algorithm === \"\"}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default OptionBar;\r\n","//Action Types\r\nexport const SET_ARRAY = \"SET_ARRAY\";\r\nexport const SWAP_ELEMENTS = \"SWAP_ELEMENTS\";\r\n\r\n//Action Creators\r\nexport const setArray = (newArray) => {\r\n\treturn {\r\n\t\ttype: SET_ARRAY,\r\n\t\tpayload: {\r\n\t\t\tnewArray,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const swapArrayElements = (index1, index2) => {\r\n\treturn {\r\n\t\ttype: SWAP_ELEMENTS,\r\n\t\tpayload: {\r\n\t\t\tindex1,\r\n\t\t\tindex2,\r\n\t\t},\r\n\t};\r\n};\r\n","// Action Types\r\nexport const SET_SORTED = \"SET_SORTED\";\r\nexport const ADD_SORTED = \"ADD_SORTED\";\r\nexport const SET_COMPARING = \"SET_COMPARING\";\r\nexport const SET_SWAPPING = \"SET_SWAPPING\";\r\nexport const SET_SIGNIFICANT = \"SET_SIGNIFICANT\";\r\n\r\n// Action Creators\r\nexport const setSorted = (elements) => {\r\n\treturn {\r\n\t\ttype: SET_SORTED,\r\n\t\tpayload: {\r\n\t\t\telements,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const addSorted = (element) => {\r\n\treturn {\r\n\t\ttype: ADD_SORTED,\r\n\t\tpayload: {\r\n\t\t\telement,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const setComparing = (elements) => {\r\n\treturn {\r\n\t\ttype: SET_COMPARING,\r\n\t\tpayload: {\r\n\t\t\telements,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const setSwapping = (elements) => {\r\n\treturn {\r\n\t\ttype: SET_SWAPPING,\r\n\t\tpayload: {\r\n\t\t\telements,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const setSignificant = (element) => {\r\n\treturn {\r\n\t\ttype: SET_SIGNIFICANT,\r\n\t\tpayload: {\r\n\t\t\telement,\r\n\t\t},\r\n\t};\r\n};\r\n","// Action Types\r\nexport const SET_RUN_STATUS = \"SET_RUN_STATUS\";\r\n\r\n// Action Creators\r\nexport const setRunStatus = (status) => {\r\n\treturn {\r\n\t\ttype: SET_RUN_STATUS,\r\n\t\tpayload: {\r\n\t\t\tstatus,\r\n\t\t},\r\n\t};\r\n};\r\n","import {\r\n\tsetSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n} from \"../reducers/element-types/actions\";\r\nimport { setRunStatus } from \"../reducers/run-status/actions\";\r\n\r\nexport const swap = (arr, index1, index2) => {\r\n\tlet temp = arr[index1];\r\n\tarr[index1] = arr[index2];\r\n\tarr[index2] = temp;\r\n};\r\n\r\nexport function handleDispatch(dispatchStack, dispatch, array, speed) {\r\n\tif (!dispatchStack.length) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconsole.log(\"done\");\r\n\t\t\tdispatch(setComparing([]));\r\n\t\t\tdispatch(setSwapping([]));\r\n\t\t\tconsole.log(array);\r\n\t\t\tdispatch(setSorted(array.map((element, index) => index)));\r\n\t\t\tdispatch(setRunStatus(false));\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tlet { action, payload } = dispatchStack.shift();\r\n\tdispatch(action(payload));\r\n\r\n\tsetTimeout(() => {\r\n\t\thandleDispatch(dispatchStack, dispatch, array, speed);\r\n\t}, speed);\r\n}\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\taddSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction selectionSort(array, dispatch, speed) {\r\n\tconsole.log(\"selection\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tlet curMin = arr[i];\r\n\t\tlet curMinIndex = i;\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setSignificant,\r\n\t\t\tpayload: curMinIndex,\r\n\t\t});\r\n\r\n\t\tfor (let j = i; j < arr.length; j++) {\r\n\t\t\t// comparing jth element to current minimum\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setComparing,\r\n\t\t\t\tpayload: [curMinIndex, j],\r\n\t\t\t});\r\n\r\n\t\t\t/*console.log(\r\n\t\t\t\t`comparing: ${arr[j]} to ${curMin} on the ${j}th iteration`\r\n\t\t\t); */\r\n\t\t\tif (arr[j] < curMin) {\r\n\t\t\t\t// update minimum value\r\n\t\t\t\tcurMin = arr[j];\r\n\t\t\t\tcurMinIndex = j;\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: setSignificant,\r\n\t\t\t\t\tpayload: curMinIndex,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//swapping minimum with first unsorted element in array\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setSwapping,\r\n\t\t\tpayload: [curMinIndex, i],\r\n\t\t});\r\n\r\n\t\tswap(arr, curMinIndex, i);\r\n\r\n\t\t//update to post-swap array\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setArray,\r\n\t\t\tpayload: [...arr],\r\n\t\t});\r\n\r\n\t\t//mark ith element as sorted\r\n\t\tdispatchStack.push({\r\n\t\t\taction: addSorted,\r\n\t\t\tpayload: i,\r\n\t\t});\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default selectionSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction insertionSort(array, dispatch, speed) {\r\n\tconsole.log(\"insertion\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\r\n\tfor (let i = 1; i < arr.length; i++) {\r\n\t\tlet curElement = arr[i];\r\n\t\tlet curElementIndex = i;\r\n\r\n\t\t// set last element in subarray as significant\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setSignificant,\r\n\t\t\tpayload: i,\r\n\t\t});\r\n\r\n\t\t// compare all previous elements to find correct placement\r\n\t\tlet j = i - 1;\r\n\t\twhile (arr[j] > curElement && j >= 0) {\r\n\t\t\t// indicate current comparison pair\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setComparing,\r\n\t\t\t\tpayload: [curElementIndex, j],\r\n\t\t\t});\r\n\r\n\t\t\t// swapping jth element with element of interest\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setSwapping,\r\n\t\t\t\tpayload: [curElementIndex, j],\r\n\t\t\t});\r\n\t\t\tswap(arr, curElementIndex, j);\r\n\t\t\tcurElementIndex = j;\r\n\r\n\t\t\t// update state array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setArray,\r\n\t\t\t\tpayload: [...arr],\r\n\t\t\t});\r\n\r\n\t\t\tj--;\r\n\t\t}\r\n\t\t// indicate final comparison (no swap after this)\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setComparing,\r\n\t\t\tpayload: [curElementIndex, j],\r\n\t\t});\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default insertionSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\taddSorted,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction bubbleSort(array, dispatch, speed) {\r\n\tconsole.log(\"bubble\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tlet swapMade = true;\r\n\tlet numSorted = 0;\r\n\r\n\twhile (swapMade) {\r\n\t\tswapMade = false;\r\n\t\tfor (let i = 0; i < arr.length - 1 - numSorted; i++) {\r\n\t\t\t// compare procedurally along the array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setComparing,\r\n\t\t\t\tpayload: [i, i + 1],\r\n\t\t\t});\r\n\r\n\t\t\tif (arr[i] > arr[i + 1]) {\r\n\t\t\t\t// swap adjacent elements\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: setSwapping,\r\n\t\t\t\t\tpayload: [i, i + 1],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tswap(arr, i, i + 1);\r\n\r\n\t\t\t\t// update state array\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: setArray,\r\n\t\t\t\t\tpayload: [...arr],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tswapMade = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// indicate last element is now sorted (maximum in subarray)\r\n\t\tdispatchStack.push({\r\n\t\t\taction: addSorted,\r\n\t\t\tpayload: arr.length - 1 - numSorted,\r\n\t\t});\r\n\t\tnumSorted++;\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n}\r\n\r\nexport default bubbleSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\taddSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction hSort(array, dispatch, speed) {\r\n\tconsole.log(\"h\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tconst h = Math.floor(Math.random() * (arr.length / 3)) + 2;\r\n\tconsole.log(h);\r\n\r\n\tfor (let i = 0; i < h; i++) {\r\n\t\tlet swapMade = true;\r\n\t\tlet numSorted = 0;\r\n\r\n\t\twhile (swapMade) {\r\n\t\t\tswapMade = false;\r\n\t\t\tfor (let j = i; j < arr.length - h; j += h) {\r\n\t\t\t\t// compare procedurally along the array\r\n\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\taction: setComparing,\r\n\t\t\t\t\tpayload: [j, j + h],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (arr[j] > arr[j + h]) {\r\n\t\t\t\t\t// swap adjacent elements\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: setSwapping,\r\n\t\t\t\t\t\tpayload: [j, j + h],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswap(arr, j, j + h);\r\n\r\n\t\t\t\t\t// update state array\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: setArray,\r\n\t\t\t\t\t\tpayload: [...arr],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswapMade = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// indicate last element is now sorted (maximum in subarray)\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: addSorted,\r\n\t\t\t\tpayload: arr.length - h * numSorted,\r\n\t\t\t});\r\n\t\t\tnumSorted++;\r\n\t\t}\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default hSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\taddSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction shellSort(array, dispatch, speed) {\r\n\tconsole.log(\"shell\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tlet h = Math.floor(arr.length / 2);\r\n\t// console.log(\"init array: \", array);\r\n\r\n\twhile (h > 0) {\r\n\t\tconsole.log(\"current h: \", h);\r\n\t\t//hsort\r\n\t\tfor (let i = 0; i < h; i++) {\r\n\t\t\tlet swapMade = true;\r\n\t\t\tlet numSorted = 0;\r\n\r\n\t\t\twhile (swapMade) {\r\n\t\t\t\tswapMade = false;\r\n\t\t\t\tfor (let j = i; j < arr.length - h; j += h) {\r\n\t\t\t\t\t// compare procedurally along the array\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: setComparing,\r\n\t\t\t\t\t\tpayload: [j, j + h],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (arr[j] > arr[j + h]) {\r\n\t\t\t\t\t\t// swap adjacent elements\r\n\t\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\t\taction: setSwapping,\r\n\t\t\t\t\t\t\tpayload: [j, j + h],\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tswap(arr, j, j + h);\r\n\r\n\t\t\t\t\t\t// update state array\r\n\t\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\t\taction: setArray,\r\n\t\t\t\t\t\t\tpayload: [...arr],\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tswapMade = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// indicate last element is now sorted (maximum in subarray)\r\n\t\t\t\tif (h == 1) {\r\n\t\t\t\t\tdispatchStack.push({\r\n\t\t\t\t\t\taction: addSorted,\r\n\t\t\t\t\t\tpayload: arr.length - 1 - numSorted,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tnumSorted++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\th = Math.floor(h / 2);\r\n\t}\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nexport default shellSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n\taddSorted,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap, handleDispatch } from \"./common\";\r\n\r\nfunction quickSort(array, dispatch, speed) {\r\n\tconsole.log(\"quick\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\tlet start = 0;\r\n\tlet end = array.length - 1;\r\n\tquickSortHelper(arr, start, end, dispatchStack);\r\n\r\n\thandleDispatch(dispatchStack, dispatch, arr, speed);\r\n\treturn arr;\r\n}\r\n\r\nfunction quickSortHelper(array, start, end, dispatchStack) {\r\n\tif (start >= end) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet low = start;\r\n\tlet high = end;\r\n\thigh = partition(array, low, high, dispatchStack);\r\n\t// the pivot used in the partition is now sorted\r\n\tdispatchStack.push({\r\n\t\taction: addSorted,\r\n\t\tpayload: high,\r\n\t});\r\n\t// console.log(\"after partition array: \", array.slice(start, end + 1));\r\n\r\n\t// sort the left side of the array\r\n\tquickSortHelper(array, start, high - 1, dispatchStack);\r\n\r\n\t// sort the right side of the array\r\n\tquickSortHelper(array, high + 1, end, dispatchStack);\r\n}\r\n\r\nfunction partition(array, low, high, dispatchStack) {\r\n\tlet pivot = array[low];\r\n\tlet pivotIndex = low;\r\n\r\n\t// console.log(\"current pivot: \", pivot);\r\n\t// indicate the pivot to be significant\r\n\tdispatchStack.push({\r\n\t\taction: setSignificant,\r\n\t\tpayload: pivotIndex,\r\n\t});\r\n\r\n\t// console.log(\"partition array: \", array.slice(low, high + 1));\r\n\tdo {\r\n\t\t// find earliest array element that is greater than pivot value\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setComparing,\r\n\t\t\tpayload: [pivotIndex, low],\r\n\t\t});\r\n\t\twhile (low <= high && array[low] <= pivot) {\r\n\t\t\tlow++;\r\n\t\t}\r\n\r\n\t\t// find latest array element that is less than or equal to pivot value\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setComparing,\r\n\t\t\tpayload: [pivotIndex, high],\r\n\t\t});\r\n\t\twhile (array[high] > pivot) {\r\n\t\t\thigh--;\r\n\t\t}\r\n\r\n\t\tif (low < high) {\r\n\t\t\t// swap positions of > pivot and <= pivot values\r\n\t\t\t// this process is what partitions the array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setSwapping,\r\n\t\t\t\tpayload: [low, high],\r\n\t\t\t});\r\n\t\t\tswap(array, low, high);\r\n\r\n\t\t\t// update state array\r\n\t\t\tdispatchStack.push({\r\n\t\t\t\taction: setArray,\r\n\t\t\t\tpayload: [...array],\r\n\t\t\t});\r\n\t\t}\r\n\t} while (low < high);\r\n\r\n\t// swap pivot with latest element that is <=\r\n\tdispatchStack.push({\r\n\t\taction: setSwapping,\r\n\t\tpayload: [pivotIndex, high],\r\n\t});\r\n\tswap(array, pivotIndex, high);\r\n\r\n\t// update state array\r\n\tdispatchStack.push({\r\n\t\taction: setArray,\r\n\t\tpayload: [...array],\r\n\t});\r\n\r\n\tpivotIndex = high;\r\n\treturn pivotIndex;\r\n}\r\n\r\nexport default quickSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { swap } from \"./common\";\r\n\r\nfunction mergeSort(array, dispatch, speed) {\r\n\tconsole.log(\"merge\");\r\n\tlet arr = [...array];\r\n\tlet dispatchStack = [];\r\n\r\n\tmergeSortHelper(arr, 0, array.length - 1, dispatchStack);\r\n}\r\n\r\nfunction mergeSortHelper(array, start, end, dispatchStack) {\r\n\tif (start >= end) {\r\n\t\treturn;\r\n\t}\r\n\tlet mid = Math.floor((start + end) / 2);\r\n\t// set middle point to be significant\r\n\tdispatchStack.push({\r\n\t\taction: setSignificant,\r\n\t\tpayload: mid,\r\n\t});\r\n\r\n\t// sort left half of array\r\n\tmergeSortHelper(array, start, mid, dispatchStack);\r\n\r\n\t// sort right half of array\r\n\tmergeSortHelper(array, mid + 1, end, dispatchStack);\r\n\r\n\t// merge two halves in a sorted manner\r\n\tmerge(array, start, mid, end, dispatchStack);\r\n}\r\n\r\nfunction merge(array, start, mid, end, dispatchStack) {\r\n\t// make two subarrays, keep track of current position in each\r\n\tlet left = {\r\n\t\tcur: start,\r\n\t\tstart,\r\n\t\tend: mid,\r\n\t};\r\n\tlet right = {\r\n\t\tcur: mid + 1,\r\n\t\tstart: mid + 1,\r\n\t\tend,\r\n\t};\r\n\tlet insertionIndex = start;\r\n\r\n\twhile (\r\n\t\tleft.cur < left.end &&\r\n\t\tright.cur < right.end &&\r\n\t\tinsertionIndex < array.length\r\n\t) {\r\n\t\t// compare an element from each half\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setComparing,\r\n\t\t\tpayload: [left.cur, right.cur],\r\n\t\t});\r\n\r\n\t\tlet swapIndex = insertionIndex;\r\n\t\t// identify which element has a lower value\r\n\t\tif (array[left.cur] <= array[right.cur]) {\r\n\t\t\tswapIndex = left.cur;\r\n\t\t\tleft.cur++;\r\n\t\t} else {\r\n\t\t\tswapIndex = right.cur;\r\n\t\t\tright.cur++;\r\n\t\t}\r\n\r\n\t\t// swap lower value with current array index\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setSwapping,\r\n\t\t\tpayload: [insertionIndex, swapIndex],\r\n\t\t});\r\n\r\n\t\tswap(array, insertionIndex, swapIndex);\r\n\r\n\t\t// update state array\r\n\t\tdispatchStack.push({\r\n\t\t\taction: setArray,\r\n\t\t\tpayload: [...array],\r\n\t\t});\r\n\t\tinsertionIndex++;\r\n\t}\r\n\r\n\twhile (left.cur < left.end && insertionIndex < array.length) {\r\n\t\t// swap current index with\r\n\t}\r\n}\r\n\r\nexport default mergeSort;\r\n","import { setArray } from \"../reducers/array/actions\";\r\nimport {\r\n\tsetSorted,\r\n\tsetComparing,\r\n\tsetSwapping,\r\n\tsetSignificant,\r\n} from \"../reducers/element-types/actions\";\r\nimport { setRunStatus } from \"../reducers/run-status/actions\";\r\n\r\nfunction heapSort(array, dispatch, speed) {\r\n\tconsole.log(\"heap\");\r\n}\r\n\r\nexport default heapSort;\r\n","import { connect } from \"react-redux\";\r\nimport OptionBar from \"./OptionBar\";\r\nimport { setArray } from \"../reducers/array/actions\";\r\nimport { setAlgorithm } from \"../reducers/algorithm/actions\";\r\nimport { setSorted } from \"../reducers/element-types/actions\";\r\nimport { setRunStatus } from \"../reducers/run-status/actions\";\r\nimport selectionSort from \"../algorithms/selectionSort\";\r\nimport insertionSort from \"../algorithms/insertionSort\";\r\nimport bubbleSort from \"../algorithms/bubbleSort\";\r\nimport hSort from \"../algorithms/hSort\";\r\nimport shellSort from \"../algorithms/shellSort\";\r\nimport quickSort from \"../algorithms/quickSort\";\r\nimport mergeSort from \"../algorithms/mergeSort\";\r\nimport heapSort from \"../algorithms/heapSort\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\talgorithm: state.algorithm,\r\n\tarray: state.array,\r\n\trunStatus: state.runStatus,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tgenerateArray: (length) => {\r\n\t\tlet array = [];\r\n\t\twhile (array.length < length) {\r\n\t\t\tarray.push(Math.floor(Math.random() * 200) + 10);\r\n\t\t}\r\n\t\tdispatch(setArray(array));\r\n\t},\r\n\tsetAlgorithm: (algorithm) => {\r\n\t\tdispatch(setAlgorithm(algorithm));\r\n\t},\r\n\tsort: (array, algorithm, speed) => {\r\n\t\tlet selectedAlgorithm;\r\n\r\n\t\t// identify selected algorithm\r\n\t\tswitch (algorithm) {\r\n\t\t\tcase \"selectionSort\":\r\n\t\t\t\tselectedAlgorithm = selectionSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"insertionSort\":\r\n\t\t\t\tselectedAlgorithm = insertionSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bubbleSort\":\r\n\t\t\t\tselectedAlgorithm = bubbleSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"hSort\":\r\n\t\t\t\tselectedAlgorithm = hSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"shellSort\":\r\n\t\t\t\tselectedAlgorithm = shellSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"quickSort\":\r\n\t\t\t\tselectedAlgorithm = quickSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"mergeSort\":\r\n\t\t\t\tselectedAlgorithm = mergeSort;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"heapSort\":\r\n\t\t\t\tselectedAlgorithm = heapSort;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tselectedAlgorithm = null;\r\n\t\t}\r\n\r\n\t\t// setup start of algorithm\r\n\t\tdispatch(setSorted([]));\r\n\t\tdispatch(setRunStatus(true));\r\n\t\tselectedAlgorithm(array, dispatch, speed);\r\n\t},\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(OptionBar);\r\n","// Action Types\r\nexport const SET_ALGORITHM = \"SET_ALGORITHM\";\r\n\r\n// Action Creators\r\nexport const setAlgorithm = (algorithm) => {\r\n\treturn {\r\n\t\ttype: SET_ALGORITHM,\r\n\t\tpayload: {\r\n\t\t\talgorithm,\r\n\t\t},\r\n\t};\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Body(props) {\r\n\tconst { array } = props;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ul>\r\n\t\t\t\t{array.map((el, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t{index}: {el}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Body;\r\n","import { connect } from \"react-redux\";\r\nimport Body from \"./Body\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tarray: state.array,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Body);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport OptionBar from \"./option-bar/OptionBarContainer\";\r\nimport Body from \"./body/BodyContainer\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<OptionBar />\r\n\t\t\t<Body />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_ARRAY, SWAP_ELEMENTS } from \"./actions\";\r\nconst initialState = [];\r\n\r\n//Helper functions\r\nconst swap = (arr, index1, index2) => {\r\n\tlet temp = arr[index1];\r\n\tarr[index1] = arr[index2];\r\n\tarr[index2] = temp;\r\n};\r\n\r\n//Reducers\r\nconst array = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ARRAY:\r\n\t\t\treturn action.payload.newArray;\r\n\t\tcase SWAP_ELEMENTS:\r\n\t\t\tlet tempArr = [...state];\r\n\t\t\tswap(tempArr, action.payload.index1, action.payload.index2);\r\n\t\t\treturn tempArr;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default array;\r\n","import { SET_ALGORITHM } from \"./actions\";\r\nconst initialState = \"\";\r\n\r\nconst algorithm = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ALGORITHM:\r\n\t\t\treturn action.payload.algorithm;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default algorithm;\r\n","import {\r\n\tSET_SORTED,\r\n\tSET_COMPARING,\r\n\tSET_SWAPPING,\r\n\tSET_SIGNIFICANT,\r\n\tADD_SORTED,\r\n} from \"./actions\";\r\nimport { combineReducers } from \"redux\";\r\nconst initialSorted = [];\r\nconst initialComparing = [];\r\nconst intialSwapping = [];\r\nconst initialSignificant = null;\r\n\r\n// Reducers for each element type\r\n\r\n//Green\r\nconst sorted = (state = initialSorted, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SORTED:\r\n\t\t\treturn action.payload.elements;\r\n\t\tcase ADD_SORTED:\r\n\t\t\treturn [...state, action.payload.element];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//Yellow\r\nconst comparing = (state = initialComparing, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_COMPARING:\r\n\t\t\treturn action.payload.elements;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//Red\r\nconst swapping = (state = intialSwapping, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SWAPPING:\r\n\t\t\treturn action.payload.elements;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//Magenta\r\nconst significant = (state = initialSignificant, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SIGNIFICANT:\r\n\t\t\treturn action.payload.element;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst elements = combineReducers({\r\n\tsorted,\r\n\tcomparing,\r\n\tswapping,\r\n\tsignificant,\r\n});\r\n\r\nexport default elements;\r\n","import { SET_RUN_STATUS } from \"./actions\";\r\nconst initialState = false;\r\n\r\n// Reducers\r\nconst runStatus = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_RUN_STATUS:\r\n\t\t\treturn action.payload.status;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default runStatus;\r\n","import { combineReducers } from \"redux\";\r\nimport array from \"./app/reducers/array\";\r\nimport algorithm from \"./app/reducers/algorithm\";\r\nimport elements from \"./app/reducers/element-types\";\r\nimport runStatus from \"./app/reducers/run-status\";\r\n\r\nconst rootReducer = combineReducers({\r\n\talgorithm,\r\n\tarray,\r\n\telements,\r\n\trunStatus,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\nconsole.log(store.getState());\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//Redux integration\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}