{"version":3,"sources":["app/option-bar/OptionBar.jsx","app/option-bar/OptionBarContainer.js","app/reducers/array/actions.js","app/body/Body.jsx","app/body/BodyContainer.js","app/App.js","serviceWorker.js","app/reducers/array/index.js","reducers.js","store.js","index.js"],"names":["OptionBar","props","console","log","generateArray","useEffect","array","id","className","onClick","length","htmlFor","type","name","value","connect","state","dispatch","push","Math","floor","random","payload","newArray","Body","map","el","index","App","Boolean","window","location","hostname","match","initialState","swap","arr","index1","index2","temp","action","tempArr","rootReducer","combineReducers","store","createStore","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SA2DeA,MAzDf,SAAmBC,GAClBC,QAAQC,IAAIF,GADa,IAEjBG,EAAkBH,EAAlBG,cAGRC,qBAAU,WACTD,EAAc,MACZ,IAPsB,IAUjBE,EAAUL,EAAVK,MACR,OACC,yBAAKC,GAAG,cACP,yBAAKC,UAAU,OAEd,yBAAKA,UAAU,OACd,4BACCD,GAAG,gBACHE,QAAS,kBAAML,EAAcE,EAAMI,UAFpC,uBASD,yBAAKF,UAAU,MAAMD,GAAG,WACvB,2BAAOI,QAAQ,cAAf,yBACA,2BAAOC,KAAK,QAAQC,KAAK,GAAGN,GAAG,eAC/B,2BAAOI,QAAQ,eAAf,8BAGA,2BAAOC,KAAK,QAAQC,KAAK,GAAGN,GAAG,iBAIhC,yBAAKC,UAAU,OACd,2BAAOG,QAAQ,aAAf,6BACA,4BAAQE,KAAK,GAAGN,GAAG,aAClB,4BAAQO,MAAM,IAAd,kBACA,4BAAQA,MAAM,IAAd,kBACA,4BAAQA,MAAM,IAAd,eACA,4BAAQA,MAAM,IAAd,UACA,4BAAQA,MAAM,IAAd,aACA,4BAAQA,MAAM,IAAd,cACA,4BAAQA,MAAM,IAAd,eAKF,yBAAKN,UAAU,OACd,4CClCUO,eAdS,SAACC,GAAD,MAAY,CACnCV,MAAOU,EAAMV,UAGa,SAACW,GAAD,MAAe,CACzCb,cAAe,SAACM,GAEf,IADA,IAAIJ,EAAQ,GACLA,EAAMI,OAASA,GACrBJ,EAAMY,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAE9CJ,ECRM,CACNL,KANuB,YAOvBU,QAAS,CACRC,SDKiBjB,SAILS,CAGbf,GEDawB,MAlBf,SAAcvB,GAAQ,IACbK,EAAUL,EAAVK,MAER,OACC,6BACC,4BACEA,EAAMmB,KAAI,SAACC,EAAIC,GACf,OACC,4BACEA,EADF,KACWD,SCJFX,eAJS,SAACC,GAAD,MAAY,CACnCV,MAAOU,EAAMV,SAGCS,CAAyBS,GCOzBI,MATf,WACC,OACC,yBAAKpB,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGiBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCjBAC,EAAe,GAGfC,EAAO,SAACC,EAAKC,EAAQC,GAC1B,IAAIC,EAAOH,EAAIC,GACfD,EAAIC,GAAUD,EAAIE,GAClBF,EAAIE,GAAUC,GAiBAjC,EAbD,WAAmC,IAAlCU,EAAiC,uDAAzBkB,EAAcM,EAAW,uCAC/C,OAAQA,EAAO5B,MACd,ILZuB,YKatB,OAAO4B,EAAOlB,QAAQC,SACvB,ILb2B,gBKc1B,IAAIkB,EAAO,YAAOzB,GAElB,OADAmB,EAAKM,EAASD,EAAOlB,QAAQe,OAAQG,EAAOlB,QAAQgB,QAC7CG,EACR,QACC,OAAOzB,ICbK0B,EAJKC,YAAgB,CACnCrC,MAAOA,ICDFsC,EAAQC,YAAYH,GAC1BxC,QAAQC,IAAIyC,EAAME,YACHF,QCKfG,IAASC,OACR,kBAAC,IAAD,CAAUJ,MAAOA,GAChB,kBAAC,EAAD,OAEDK,SAASC,eAAe,SJmHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f4f61e19.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./OptionBar.css\";\r\nfunction OptionBar(props) {\r\n\tconsole.log(props);\r\n\tconst { generateArray } = props;\r\n\r\n\t//Initialize array\r\n\tuseEffect(() => {\r\n\t\tgenerateArray(50);\r\n\t}, []);\r\n\r\n\t//Render logic\r\n\tconst { array } = props;\r\n\treturn (\r\n\t\t<div id=\"option-bar\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{/* generate new array */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid=\"generateArray\"\r\n\t\t\t\t\t\tonClick={() => generateArray(array.length)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tGenerate New Array\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* change array size and speed of visualizer */}\r\n\t\t\t\t<div className=\"col\" id=\"sliders\">\r\n\t\t\t\t\t<label htmlFor=\"changeSize\">change size of array:</label>\r\n\t\t\t\t\t<input type=\"range\" name=\"\" id=\"changeSize\" />\r\n\t\t\t\t\t<label htmlFor=\"changeSpeed\">\r\n\t\t\t\t\t\tchange speed of algorithm:\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input type=\"range\" name=\"\" id=\"changeSpeed\" />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* choose sorting algorithm */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<label htmlFor=\"algorithm\">select sorting algorithm:</label>\r\n\t\t\t\t\t<select name=\"\" id=\"algorithm\">\r\n\t\t\t\t\t\t<option value=\"\">Selection Sort</option>\r\n\t\t\t\t\t\t<option value=\"\">Insertion Sort</option>\r\n\t\t\t\t\t\t<option value=\"\">Bubble Sort</option>\r\n\t\t\t\t\t\t<option value=\"\">H Sort</option>\r\n\t\t\t\t\t\t<option value=\"\">QuickSort</option>\r\n\t\t\t\t\t\t<option value=\"\">Merge Sort</option>\r\n\t\t\t\t\t\t<option value=\"\">Heap Sort</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* start sorting */}\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<button>Sort</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default OptionBar;\r\n","import { connect } from \"react-redux\";\r\nimport OptionBar from \"./OptionBar\";\r\nimport { setArray } from \"../reducers/array/actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tarray: state.array,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tgenerateArray: (length) => {\r\n\t\tlet array = [];\r\n\t\twhile (array.length < length) {\r\n\t\t\tarray.push(Math.floor(Math.random() * 200) + 10);\r\n\t\t}\r\n\t\tdispatch(setArray(array));\r\n\t},\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(OptionBar);\r\n","//Action Types\r\nexport const SET_ARRAY = \"SET_ARRAY\";\r\nexport const SWAP_ELEMENTS = \"SWAP_ELEMENTS\";\r\n\r\n//Action Creators\r\nexport const setArray = (newArray) => {\r\n\treturn {\r\n\t\ttype: SET_ARRAY,\r\n\t\tpayload: {\r\n\t\t\tnewArray,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const swapArrayElements = (index1, index2) => {\r\n\treturn {\r\n\t\ttype: SWAP_ELEMENTS,\r\n\t\tpayload: {\r\n\t\t\tindex1,\r\n\t\t\tindex2,\r\n\t\t},\r\n\t};\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Body(props) {\r\n\tconst { array } = props;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ul>\r\n\t\t\t\t{array.map((el, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t{index}: {el}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Body;\r\n","import { connect } from \"react-redux\";\r\nimport Body from \"./Body\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tarray: state.array,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Body);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport OptionBar from \"./option-bar/OptionBarContainer\";\r\nimport Body from \"./body/BodyContainer\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<OptionBar />\r\n\t\t\t<Body />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_ARRAY, SWAP_ELEMENTS } from \"./actions\";\r\nconst initialState = [];\r\n\r\n//Helper functions\r\nconst swap = (arr, index1, index2) => {\r\n\tlet temp = arr[index1];\r\n\tarr[index1] = arr[index2];\r\n\tarr[index2] = temp;\r\n};\r\n\r\n//Reducers\r\nconst array = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ARRAY:\r\n\t\t\treturn action.payload.newArray;\r\n\t\tcase SWAP_ELEMENTS:\r\n\t\t\tlet tempArr = [...state];\r\n\t\t\tswap(tempArr, action.payload.index1, action.payload.index2);\r\n\t\t\treturn tempArr;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default array;\r\n","import { combineReducers } from \"redux\";\r\nimport array from \"./app/reducers/array\";\r\n\r\nconst rootReducer = combineReducers({\r\n\tarray: array,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\nconsole.log(store.getState());\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//Redux integration\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}